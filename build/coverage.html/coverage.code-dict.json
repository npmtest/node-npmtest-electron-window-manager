{"/home/travis/build/npmtest/node-npmtest-electron-window-manager/test.js":"/* istanbul instrument in package npmtest_electron_window_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-window-manager/lib.npmtest_electron_window_manager.js":"/* istanbul instrument in package npmtest_electron_window_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_window_manager = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_window_manager = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-window-manager/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-window-manager && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_window_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_window_manager\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_window_manager.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_window_manager.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_window_manager.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_window_manager.__dirname + '/lib.npmtest_electron_window_manager.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-window-manager/node_modules/electron-window-manager/index.js":"\n    /**\n     * Hi there. Good luck with your Electron app.\n     * Please check out the module full documentation on Github\n     *\n     * ~ zain\n     * */\n\n    'use strict';\n\n    const Electron = require('electron');\n    const Application = Electron.app;\n    const BrowserWindow = Electron.BrowserWindow;\n    const EventEmitter = new (require('events').EventEmitter);\n    const FileSystem = require('fs');\n    const WatchJS = require('melanke-watchjs');\n    const Shortcuts = require('electron-localshortcut');\n    const _ = require('underscore');\n\n    /**\n     * Creates a new Window instance\n     *\n     * @param name [optional] The code name for the window, each window must have a unique name\n     * @param title [optional] The window title\n     * @param url [optional] The targeted page/url of the window\n     * @param setupTemplate [optional] The name of the setup template you want to use with this new window\n     * @param setup [optional] The setup object that will be passed to the BrowserWindow module\n     * @param showDevTools [optional] Whether to show the dev tools or not, false by default\n     * */\n    var Window = function(name, title, url, setupTemplate, setup, showDevTools){\n        // Check if the window already exists\n        if(windowManager.windows[name]){\n            console.log('Window ' + name + ' already exists!');\n\n            // Move the focus on it\n            windowManager.focusOn(name);\n            return;\n        }\n\n        // The window unique name, if omitted a serialized name will be used instead; window_1 ~> window_2 ~> ...\n        this.name = name || ( 'window_' + ( _.keys(windowManager.windows).length + 1 ) );\n\n        // The BrowserWindow module instance\n        this.object = null;\n\n        this.setup = {\n            'show': false,\n            'setupTemplate': setupTemplate\n        };\n\n        if(title) this.setup.title = title;\n        if(url) this.setup.url = url;\n        if(showDevTools) this.setup.showDevTools = showDevTools;\n\n        // If the setup is just the window dimensions, like '500x350'\n        if(_.isString(setup) && setup.indexOf('x') >= 0){\n            var dimensions = setup.split('x');\n            setup = {\n                'width': parseInt(dimensions[0]),\n                'height': parseInt(dimensions[1])\n            };\n        }\n\n        // Overwrite the default setup\n        if(_.isObject(setup)){\n            this.setup = _.extend(this.setup, setup);\n        }\n\n        // Register the window on the window manager\n        windowManager.windows[this.name] = this;\n    };\n\n    /**\n     * Updates the window setup\n     * */\n    Window.prototype.set = function(prop, value){\n        if(value){\n            this.setup[prop] = value;\n\n        }else if(_.isObject(prop)){\n            this.setup = _.extend(this.setup, prop);\n        }\n    };\n\n    /**\n     * Sets the window preferred layout\n     * @param name The name of the layout, registered using layouts.add()\n     * */\n    Window.prototype.useLayout = function(name){\n        // Set the window's layout\n        this.setup.layout = name;\n    };\n\n    /**\n     * Sets the setup template to use\n     * */\n    Window.prototype.applySetupTemplate = function(name){\n        this.setup.setupTemplate = name;\n    };\n\n    /**\n     * Sets the target URL for the window\n     * */\n    Window.prototype.setURL = function(url){\n        this.setup.url = url;\n    };\n\n    /**\n     * Created window instance\n     * @param url [optional] The window target URL in case you didn't provide it in the constructor\n     * */\n    Window.prototype.create = function(url) {\n        var instance = this;\n\n        if(url){\n            this.setup.url = url;\n        }\n\n        // Get a copy of the window manager config\n        var config = windowManager.config;\n\n        // If a setup setupTemplate is provided\n        var template = this.setup.setupTemplate || config.defaultSetupTemplate;\n        if(template && this.setup.setupTemplate !== false){\n            // Get the setupTemplate\n            template = templates.get(template);\n\n            // Merge with this window setup\n            if(template){\n                this.setup = _.extend(template, this.setup);\n\n            }else{\n                console.log('The setup template \"' + template + '\" wasn\\'t found!');\n            }\n        }\n\n        // The title\n        {\n            if(!this.setup.title && config.defaultWindowTitle){\n                this.setup.title = config.defaultWindowTitle;\n            }\n\n            if(this.setup.title && config.windowsTitlePrefix && !config.defaultWindowTitle){\n                this.setup.title = config.windowsTitlePrefix + this.setup.title;\n            }\n        }\n\n        // Handle the \"position\" feature/property\n        if(this.setup.position){\n            // If an array was passed\n            if(_.isArray(this.setup.position)){\n                this.setup.x = this.setup.position[0];\n                this.setup.y = this.setup.position[1];\n\n            }else{\n                // Resolve the position into x & y coordinates\n                var xy = utils.resolvePosition(this.setup);\n                if(xy){\n                    this.setup.y = xy[1];\n                    this.setup.x = xy[0];\n                }\n            }\n        }\n\n        // The defaults\n        if(!this.setup.resizable) this.setup.resizable = false;\n        if(!this.setup.useContentSize) this.setup.useContentSize = true;\n        if(!this.setup.x && !this.setup.y) this.setup.center = true;\n\n        // Create the new browser window instance, with the passed setup\n        this.object = new BrowserWindow(this.setup);\n\n        // Log the action\n        console.log('Window \"' + this.name + '\" was created');\n\n        // On load failure\n        this.object.webContents.on('did-fail-load', function(){\n            instance.down();\n        });\n\n        // If the width/height not provided!\n        var bounds = this.object.getBounds();\n        if(!this.setup.width) this.setup.width = bounds.width;\n        if(!this.setup.height) this.setup.height = bounds.height;\n\n        // Open the window target content/url\n        if(this.setup.url){\n            this.loadURL(this.setup.url);\n        }\n\n        // Set the window menu (null is valid to not have a menu at all)\n        if(this.setup.menu !== undefined){\n            this.object.setMenu(this.setup.menu);\n        }\n\n        // Show the dev tools ?\n        if(this.setup.showDevTools === true){\n            // Show the dev tools\n            this.object.toggleDevTools();\n        }\n\n        // On close\n        this.object.on('closed', function(){\n            console.log('Window \"' + instance.name + '\" was closed');\n\n            // Delete the reference on the windowManager object\n            delete windowManager.windows[instance.name];\n\n            // Delete the window object\n            instance.object = null;\n            instance = null;\n        });\n\t\t\n\t\treturn this;\n    };\n\n    /**\n     * Open the created window instance\n     * @param url [optional] The window target URL in case you didn't provide it in the constructor\n     * @param hide [optional] Whether to show or hide the newely-created window, false by default\n     * */\n    Window.prototype.open = function(url, hide){\n        // If the window is already created\n        if(_.isObject(this.object)){\n            this.focus();\n            return false;\n        }\n\n        // Create the window\n        this.create(url);\n\n        // Show the window\n        if(!hide){\n            this.object.show();\n        }\n    };\n\n    /**\n     * Makes the focus on this window\n     * */\n    Window.prototype.focus = function(){\n        this.object.focus();\n\n        return this;\n    };\n\n    /**\n     * Load a URL into the window\n     * */\n    Window.prototype.loadURL = function(url, options){\n        // Ready the url\n        url = utils.readyURL(url || this.setup.url);\n\n        var instance = this,\n            layout = this.setup.layout !== false\n                ?(this.setup.layout || windowManager.config.defaultLayout) :false;\n\n        // If a layout is specified\n        var layoutFile = layouts.get(layout);\n        if(layout && !layoutFile){\n            console.log('The layout \"' + layout +'\" wasn\\'t found!');\n        }\n\n        if(layout && layoutFile && url.substring(0, 4) != 'http'){\n            url = url.replace('file://', '');\n\n            // Load the the layout first\n            FileSystem.readFile(layoutFile, 'utf-8', function(error, layoutCode){\n                if(error){\n                    console.log('Couldn\\'t load the layout file: ' + layoutFile);\n\n                    // Take the page down!\n                    instance.down();\n\n                    return false;\n                }\n\n                // Load the targeted file body\n                FileSystem.readFile(url, 'utf-8', function(error, content){\n                    if(error){\n                        console.log('Can not find the he targeted page :' + url);\n\n                        // Take the page down!\n                        instance.down();\n\n                        return false;\n                    }\n\n                    // Get the final body\n                    content = layoutCode.replace('{{content}}', content);\n\n                    // Load the final output\n                    instance.html(content, options);\n                });\n            });\n\n        }else{\n            // Load the passed url\n            instance.content().loadURL(url, options);\n        }\n    };\n\n    /**\n     * Sets the content of the window to whatever HTML code your provide\n     * @param code The HTML code\n     * @param options\n     * */\n    Window.prototype.html = function(code, options){\n        this.content().loadURL('data:text/html,' + code, options);\n    };\n\n    /**\n     * Triggers the load-failure callback. This method is called whenever the targeted content isn't available or\n     * accessible. It will display a custom message by default, unless you define a custom callback for the window\n     * */\n    Window.prototype.down = function(){\n        // Force ignore the layout!\n        this.setup.layout = false;\n\n        // Either a custom failure call back, or call the global one\n        var callback = this.setup.onLoadFailure || windowManager.config.onLoadFailure;\n\n        // Trigger the call back\n        callback.call(null, this);\n    };\n\n    /**\n     * Returns the \"webContents\" object of the window\n     * */\n    Window.prototype.content = function(){\n        return this.object.webContents;\n    };\n\n    /**\n     * Reload the window content\n     * @param ignoreCache By default the page cache will be used, pass TRUE to ignore this cache when reloading\n     * */\n    Window.prototype.reload = function(ignoreCache){\n        if(ignoreCache === true){\n            // Reload ignoring the cache!\n            this.content().reloadIgnoringCache();\n\n        }else{\n            // Reload the content, with the cache available\n            this.content().reload();\n        }\n    };\n\n    /**\n     * Returns the url of the current page inside the window\n     * */\n    Window.prototype.currentURL = function(){\n        return this.content().getURL();\n    };\n\n    /**\n     * A callback to fire when the page is ready\n     * @param withTheDomReady Pass true to execute the callback when the DOM is ready, and not just the page have loaded\n     * @param callback The callback to trigger when the page is ready. This callback is passed two to parameters;\n     * the first is the window instance object, and the second is the window content object\n     * */\n    Window.prototype.onReady = function(withTheDomReady, callback){\n        var instance = this,\n            event = (withTheDomReady === true) ?'dom-ready' :'did-finish-load';\n\n        // Fire the callback and pass the window .webContents to it\n        this.content().on(event, function(){\n            callback.call(null, instance, instance.content());\n        });\n    };\n\n    /**\n     * Executes JS code on the created window\n     * @param code The JS code\n     * */\n    Window.prototype.execute = function(code){\n        this.content().executeJavaScript(code);\n    };\n\n    /**\n     * Go back to the previous page/url to the current\n     * */\n    Window.prototype.goBack = function(){\n        if(this.content().canGoBack()){\n            this.content().goBack();\n        }\n    };\n\n    /**\n     * Closes the window\n     * */\n    Window.prototype.close = function(){\n        this.object.close();\n    };\n\n    /**\n     * Destroys a the window instance\n     * */\n    Window.prototype.destroy = function(){\n        this.object.destroy();\n        delete this;\n        console.log('Window \"' + this.name + '\" was destroyed');\n    };\n\n    /**\n     * Minimizes the window\n     * */\n    Window.prototype.minimize = function(){\n        this.object.minimize();\n\n        return this;\n    };\n\n    /**\n     * Maximizes/Unmaximizes the window\n     * */\n    Window.prototype.maximize = function(){\n        if(this.object.isMaximized()) this.object.restore();\n        else this.object.maximize();\n\n        return this;\n    };\n\n    /**\n     * Restore the window into focus\n     * */\n    Window.prototype.restore = function(){\n        this.object.restore();\n\n        return this;\n    };\n\n    /**\n     * Makes the window full screen\n     * */\n    Window.prototype.toFullScreen = function(){\n        this.object.setFullScreen(true);\n\n        return this;\n    };\n\n    /**\n     * Toggles developer tools\n     * @param detached [optional] Whether to open the dev tools in a separate window or not\n     * */\n    Window.prototype.toggleDevTools = function(detached){\n        this.object.toggleDevTools({detached: detached || false});\n\n        return this;\n    };\n\n    /**\n     * Attaching shortcut to the window\n     * */\n    Window.prototype.registerShortcut = function(accelerator, callback){\n        var instance = this;\n\n        Shortcuts.register(this.object, accelerator, function(){\n            callback.call(null, instance);\n        });\n\n        return this;\n    };\n\n    /**\n     * Moves the window to a specific x y position, or you can simple use a pre-defined position, like \"right\", \"left\"\n     * \"topLeft\", \"bottomRight\", ...\n     * */\n    Window.prototype.move = function(x, y){\n        // Get the window bounds first\n        var bounds = this.object.getBounds();\n\n        // If a position name was provided\n        if(_.isString(x)){\n            this.setup.position = x;\n            var xy = utils.resolvePosition(this.setup);\n\n            if(xy){\n                x = xy[0];\n                y = xy[1]\n            }\n        }\n\n        // Set the bounds\n        this.object.setBounds({\n            'x': x || bounds.x,\n            'y': y || bounds.y,\n            'width': this.setup.width,\n            'height': this.setup.height\n        });\n\n        return this;\n    };\n\n    /**\n     * Resize the window, by entering either the width or the height, or both\n     * */\n    Window.prototype.resize = function(width, heigt){\n        // Get the current bounds\n        var bounds = this.object.getBounds();\n\n        this.object.setBounds({\n            'width': width || bounds.width,\n            'height': heigt || bounds.height,\n            'x': bounds.x,\n            'y': bounds.y\n        });\n\n        return this;\n    };\n\n    /**\n     * The setup templates. Where you can create a ready-to-use setup templates/groups for the BrowserWindow instance\n     * */\n    var templates = {\n        'templates': {},\n\n        /**\n         * Set a new template\n         * */\n        'set': function(name, setup){\n            if(!_.isObject(setup) || this.templates[name]) return false;\n\n            this.templates[name] = setup;\n        },\n\n        /**\n         * Fetches the setup by name\n         * */\n        'get': function(name){\n            return _.clone(this.templates[name]);\n        },\n\n        /**\n         * Change/modify the template properties\n         * @param name The name of the template\n         * @param setup The new changes, as an object\n         * */\n        'modify': function(name, setup){\n            if(!_.isObject(setup) || !this.templates[name]) return false;\n\n            this.templates[name] = _.extend(this.get(name), setup);\n        },\n\n        /**\n         * Return a setup property value of a setup templates\n         * @param name The name of the template\n         * @param prop The property needed back\n         * */\n        'getProperty': function(name, prop){\n            return this.get(name)[prop];\n        }\n    };\n\n    /**\n     * A bunch of tools/utilities for the module\n     * */\n    var utils = {\n        /**\n         * Returns the full path to the application directory\n         * */\n        'getAppLocalPath': function(){\n            return Application.getAppPath() + '/';\n        },\n\n        /**\n         * Readies the passed URL for opening. If it starts with \"/\" it will be prefixed with the app directory\n         * path. Also if it contain \"{appBase}\", this value will be replaces with the app path too.\n         * */\n        'readyURL': function(url){\n            if(url[0] == '/'){\n                return windowManager.config.appBase + url;\n\n            }else{\n                return url.replace('{appBase}', windowManager.config.appBase);\n            }\n        },\n\n        /**\n         * Resolves a position name into x & y coordinates.\n         * @param setup The window setup object\n         * */\n        'resolvePosition': function(setup){\n            var screen = Electron.screen,\n                screenSize = screen.getPrimaryDisplay().workAreaSize,\n                position = setup.position,\n                x = 0, y = 0,\n                positionMargin = 0,\n                windowWidth = setup.width,\n                windowHeight = setup.height;\n\n            // If the window dimensions are not set\n            if(!windowWidth || !windowHeight){\n                console.log('Cannot position a window with the width/height not defined!');\n\n                // Put in in the center\n                setup.center = true;\n                return false;\n            }\n\n            // If the position name is incorrect\n            if(['center', 'top', 'right', 'bottom', 'left', 'topLeft', 'leftTop', 'topRight',\n                    'rightTop', 'bottomRight', 'rightBottom', 'bottomLeft', 'leftBottom'].indexOf(position) < 0){\n\n                console.log('The specified position \"' + position + '\" is\\'not correct! Check the docs.');\n                return false;\n            }\n\n            // It's center by default, no need to carry on\n            if(position == 'center'){\n                return false;\n            }\n\n            // Compensate for the frames\n          if (setup.frame === true) {\n              switch (position) {\n                  case 'left':\n                      break;\n\n                  case 'right':\n                      windowWidth += 8;\n                      break;\n\n                  case 'top':\n                      windowWidth += 13;\n                      break;\n\n                  case 'bottom':\n                      windowHeight += 50;\n                      windowWidth += 13;\n                      break;\n\n                  case 'leftTop':\n                  case 'topLeft':\n                      windowWidth += 0;\n                      windowHeight += 50;\n                      break;\n\n                  case 'rightTop':\n                  case 'topRight':\n                      windowWidth += 8;\n                      windowHeight += 50;\n                      break;\n\n                  case 'leftBottom':\n                  case 'bottomLeft':\n                      windowWidth -= 0;\n                      windowHeight += 50;\n                      break;\n\n                  case 'rightBottom':\n                  case 'bottomRight':\n                      windowWidth += 8;\n                      windowHeight += 50;\n                      break;\n              }\n          }\n\n              switch (position) {\n              case 'left':\n                  y = Math.floor((screenSize.height - windowHeight) / 2);\n                  x = positionMargin - 8;\n                  break;\n\n              case 'right':\n                  y = Math.floor((screenSize.height - windowHeight) / 2);\n                  x = (screenSize.width - windowWidth) - positionMargin;\n                  break;\n\n              case 'top':\n                  y = positionMargin;\n                  x = Math.floor((screenSize.width - windowWidth) / 2);\n                  break;\n\n              case 'bottom':\n                  y = (screenSize.height - windowHeight) - positionMargin;\n                  x = Math.floor((screenSize.width - windowWidth) / 2);\n                  break;\n\n              case 'leftTop':\n              case 'topLeft':\n                  y = positionMargin;\n                  x = positionMargin - 8;\n                  break;\n\n              case 'rightTop':\n              case 'topRight':\n                  y = positionMargin;\n                  x = (screenSize.width - windowWidth) - positionMargin;\n                  break;\n\n              case 'leftBottom':\n              case 'bottomLeft':\n                  y = (screenSize.height - windowHeight) - positionMargin;\n                  x = positionMargin - 8;\n                  break;\n\n              case 'rightBottom':\n              case 'bottomRight':\n                  y = (screenSize.height - windowHeight) - positionMargin;\n                  x = (screenSize.width - windowWidth) - positionMargin;\n                  break;\n          }\n\n            return [x, y];\n        }\n    };\n\n    /**\n     * Manges the layouts information\n     * */\n    var layouts = {\n        'layouts': {},\n\n        /**\n         * Registers a new layout\n         * @param name The name of the layout\n         * @param path The path to the layout. It will be automatically prefixed with the app full path\n         * */\n        'add': function(name, path){\n            this.layouts[name] = utils.getAppLocalPath() + path;\n        },\n\n        /**\n         * Retrieves the layout path, by name\n         * @param name The name of the layout registered earlier\n         * */\n        'get': function(name){\n            return this.layouts[name];\n        }\n    };\n\n    /**\n     * The module interface\n     * */\n    var windowManager = {\n        /**\n         * The templates management API\n         * */\n        'templates': templates,\n        /**\n         * The layouts management API\n         * */\n        'layouts': layouts,\n        /**\n         * The utilities\n         * */\n        'utils': utils,\n        /**\n         * The event emitter\n         * */\n        'eventEmitter': EventEmitter,\n        /**\n         * The shortcuts module\n         * */\n        'shortcuts': Shortcuts,\n\n        /**\n         * The global configuration\n         * */\n        'config': {\n            'appBase': null, // The full path to the application directory\n            'devMode': true, // Turns the development mode on/off\n            'layouts': false, // A list of the layouts, a direct shortcut, instead of using layouts.add for each layout\n            'defaultLayout': false, // The default layout name\n            'defaultSetupTemplate': false, // The default setup template name\n            'defaultWindowTitle': null, // The default window title\n            'windowsTitlePrefix': null, // A prefix for the windows title\n            /**\n             * The window url global load-failure callback\n             * */\n            \"onLoadFailure\": function(window){\n                window.content().loadURL('file://' + __dirname + '/loadFailure.html');\n            }\n        },\n\n        /**\n         * The Window instances, stored by names\n         * */\n        'windows': {},\n\n        /**\n         * Initiate the module\n         * @param config The configuration for the module\n         * */\n        'init': function(config){\n            // If the config object is provided\n            if(_.isObject(config)){\n                this.config = _.extend(this.config, config);\n\n            }else if(_.isString(config)){\n                this.config.appBase = config;\n            }\n\n            // If the app base isn't provided\n            if(!this.config.appBase){\n                this.config.appBase = utils.getAppLocalPath();\n            }\n\n            // If the layouts list was passed in the config\n            if(this.config.layouts && _.isObject(this.config.layouts)){\n                _.each(this.config.layouts, function(path, name){\n                    layouts.add(name, path);\n                });\n            }\n\n            // If the dev mode is on\n            if(this.config.devMode === true){\n                // Attach some shortcuts\n                Application.on('ready', function(){\n\n                    // CTRL+F12 to toggle the dev tools\n                    Shortcuts.register('CmdOrCtrl+F12', function(){\n                        var window = windowManager.getCurrent();\n                        if(window) window.toggleDevTools();\n                    });\n\n                    // CTRL+R to reload the page\n                    Shortcuts.register('CmdOrCtrl+R', function(){\n                        var window = windowManager.getCurrent();\n                        if(window) window.reload();\n                    });\n\n                });\n            }\n\n            // If a default setup is provided\n            if(this.config.defaultSetup){\n                this.setDefaultSetup(this.config.defaultSetup);\n                delete this.config.defaultSetup;\n            }\n        },\n\n        /**\n         * Sets the default setup for all the BrowserWindow instances, unless a different template is selected\n         * or false is passed instead. It creates a new template with the name \"default\" for this setup.\n         * @param setup The setup object\n         * */\n        'setDefaultSetup': function(setup){\n            if(!_.isObject(setup)) return false;\n\n            // Add the setup template\n            templates.set('default', setup);\n\n            // Make it the default setup\n            this.config.defaultSetupTemplate = 'default';\n        },\n\n        /**\n         * Using this method you can create more than one window with the setup information retrieved from a JSON file.\n         * */\n        'importList': function(file){\n            var list = require(utils.getAppLocalPath() + file);\n            if(!_.isObject(list)) return false;\n\n            _.each(list, function(window, name){\n                windowManager.createNew(name, window.title, window.url, window.setupTemplate, window.setup);\n            });\n        },\n\n        /**\n         * Create a new window instance. Check the Window object for documentation.\n         * */\n        'createNew': function(name, title, url, setupTemplate, setup, showDevTools){\n            // Create the window instance\n            var window = new Window(name, title, url, setupTemplate, setup, showDevTools);\n\n            // If the window was created\n            return _.isEmpty(window) ?false :window;\n        },\n\n        /**\n         * Opens a new window\n         * */\n        'open': function(name, title, content, setupTemplate, setup, showDevTools){\n            var window = this.createNew(name, title, content, setupTemplate, setup, showDevTools);\n            if(window) window.open();\n            return window;\n        },\n\n        /**\n         * Create a clone of the passed window\n         * */\n        'clone': function(name){\n            var window = this.get(name);\n            if(!window) return;\n\n            return this.createNew(false, false, false,  false, this.setup);\n        },\n\n        /**\n         * Get a window instance, by name\n         * */\n        'get': function(name){\n            if(!this.windows[name]){\n                console.log('Window ' + name + ' doesn\\'t exist!');\n                return false;\n            }\n\n            return this.windows[name];\n        },\n\n        /**\n         * Get a window instance, by BrowserWindow instance id\n         */\n        getById: function(id) {\n            var instance;\n            _.each(this.windows, function(window){\n                if(window.object.id === id){\n                    instance = window;\n                }\n            });\n            return instance;\n        },\n\n        /**\n         * Fetches the currently-under-focus window\n         * */\n        'getCurrent': function(){\n            var thisWindow = BrowserWindow.getFocusedWindow();\n            if(!thisWindow) return false;\n\n            return this.getById(thisWindow.object.id);\n        },\n\n        /**\n         * Closes a window, by name\n         * */\n        'close': function(name){\n            this.get(name).object.close();\n        },\n\n        /**\n         * Closes this/current window\n         * */\n        'closeCurrent': function(){\n            var current = this.getCurrent();\n            if(current) current.close();\n        },\n\n        /**\n         * Destroy a window instance, by name\n         * */\n        'destroy': function(name){\n            this.get(name).destroy();\n        },\n\n        /**\n         * Close all windows created by this module\n         * */\n        'closeAll': function(){\n            _.each(this.windows, function(window){\n                window.close();\n            });\n        },\n\n        /**\n         * Close all window except for one\n         * */\n        'closeAllExcept': function(name){\n            // Get all the windows\n            var windows = BrowserWindow.getAllWindows();\n\n            // Get the window through the name\n            var windowID = this.get(name).object.id;\n            if(!windows.length || !windowID) return false;\n\n            // Loop through the windows, close all of them and focus on the targeted one\n            _.each(windows, function(window){\n                if(window.id != windowID){\n                    window.close();\n                }\n            });\n\n            this.get(name).focus();\n        },\n\n        /**\n         * Focuses on a specific, by name\n         * */\n        'focusOn': function(name){\n            this.get(name).focus();\n        },\n\n        /**\n         * Maximize a window by name\n         * */\n        'maximize': function(name){\n            var win = (name) ? this.get(name) : this.getCurrent();\n            win.maximize();\n        },\n\n        /**\n         * Minimize a window by name\n         * */\n        'minimize': function(name){\n            var win = (name) ? this.get(name) : this.getCurrent();\n            win.minimize();\n        },\n\n        /**\n         * Restore a window by name\n         * */\n        'restore': function(name){\n            this.get(name).object.restore();\n        },\n\n        /**\n         * This method simply takes two values, the first is the one that goes when the development mode is on and\n         * the other is when it's off, and according to whether it's on or off, the corresponding value will be returned\n         * */\n        'devModeChoice': function(whenDevMode, whenNotDevMode){\n            return (this.config.devMode === true) ?whenDevMode: whenNotDevMode;\n        },\n\n        /**\n         * A simple way of sharing data between windows\n         * */\n        'sharedData': {\n            /**\n             * The Watch.js object\n             * */\n            'watcher': WatchJS,\n\n            /**\n             * The shared data/values\n             * */\n            'data': {},\n\n            /**\n             * Sets a new key/value pair\n             * */\n            'set': function(key, value){\n                this.data[key] = value;\n            },\n\n            /**\n             * Fetches a stored value from the data store, by the property name\n             * @param key The key of the value\n             * @param altValue The alternative value to return in case the passed key doesn't exist\n             * */\n            'fetch': function(key, altValue){\n                return this.data[key] ?this.data[key] :altValue;\n            },\n\n            /**\n             * Watches for property changes in the shared data, and triggers a callback whenever a change happens\n             * */\n            'watch': function(prop, callback){\n                this.watcher.watch(this.data, prop, callback);\n            }\n        },\n\n        /**\n         * Creates a bridge between windows, by using Node.js EventEmitter module. Using this feature you will be able\n         * to fire callbacks to certain events pre-defined in the listening windows/pages\n         * */\n        'bridge': {\n            /**\n             * Sets the callback to trigger whenever an event is emitted\n             * @param event The name of the event\n             * @param callback The callback to trigger, this callback will be given the data passed (if any), and\n             * the name of the targeted window and finally the name of the window that triggered/emitted the event\n             * @return the handler that add into the event listeners array\n             * */\n            'on': function(event, callback){\n                let id =  windowManager.eventEmitter.listenerCount(event);\n\n                windowManager.eventEmitter.addListener(event, function(event){\n                    callback.call(null, event.data, event.target, event.emittedBy);\n                });\n\n                return windowManager.eventEmitter.listeners(event)[id];\n            },\n\n            /**\n             * Remove a event listener returned by windowManger.bridge.on\n             * or windowManager.bridge.addListener\n             * @param event The name of the event\n             * @param handler the listen handler returned by\n             *        windowManager.bridge.on or windowManager.bridge.on\n             */\n            'removeListener': function(event, handler) {\n                windowManager.eventEmitter.removeListener(event, handler);\n            },\n\n            /**\n             * Emits an event\n             * @param event The name of the event\n             * @param data [optional] Any accompanying value(s)\n             * @param target [optional] The name of the targeted window\n             * */\n            'emit': function(event, data, target){\n                windowManager.eventEmitter.emit(event, {\n                    'emittedBy': windowManager.getCurrent().name,\n                    'target': target,\n                    'data': data\n                });\n            }\n        }\n    };\n\n    module.exports = windowManager;\n"}